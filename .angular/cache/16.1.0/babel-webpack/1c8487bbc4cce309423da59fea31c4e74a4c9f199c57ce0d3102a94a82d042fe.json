{"ast":null,"code":"import { ReplaySubject, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class InventoryService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'https://localhost:5001/api/batches/';\n    this.currentBatchSource = new ReplaySubject(1);\n    this.currentBatches = this.currentBatchSource.asObservable();\n    this.currentLogSource = new ReplaySubject(1);\n    this.currentLogs = this.currentLogSource.asObservable();\n  }\n  getAllBatches() {\n    return this.http.get(this.baseUrl);\n  }\n  create(model) {\n    console.log(model);\n    return this.http.post(this.baseUrl + 'create', model).pipe(map(batch => {\n      if (batch) {\n        localStorage.setItem('batch', JSON.stringify(batch));\n        this.currentBatchSource.next(batch);\n      }\n    }));\n  }\n  update(model) {\n    updateMember(member, Member);\n    {\n      return this.http.put(this.baseUrl + 'users', member).pipe(map(() => {\n        const index = this.members.indexOf(member);\n        this.members[index] = member;\n      }));\n    }\n    //this.http.put<Batch>(this.baseUrl + model.id, model.JSON);\n    return this.http.put(this.baseUrl + model.id, model).pipe(map(batch => {\n      if (batch) {\n        localStorage.setItem('batch', JSON.stringify(batch));\n        this.currentBatchSource.next(batch);\n      }\n    }));\n    /*return this.http.put<Batch>(this.baseUrl + model.id, model.JSON).pipe(\n      map((batch: Batch) => {\n        if (batch) {\n          localStorage.setItem('batch', JSON.stringify(batch));\n          this.currentBatchSource.next(batch);\n        }\n      })\n    )*/\n  }\n\n  search(id) {\n    return this.http.get(this.baseUrl + 'branches/' + id);\n  }\n  findBatch(id) {\n    return this.http.post(this.baseUrl + id, id).pipe(map(batch => {\n      if (batch) {\n        return batch;\n      }\n      return batch;\n    }));\n  }\n}\nInventoryService.ɵfac = function InventoryService_Factory(t) {\n  return new (t || InventoryService)(i0.ɵɵinject(i1.HttpClient));\n};\nInventoryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: InventoryService,\n  factory: InventoryService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["ReplaySubject","map","InventoryService","constructor","http","baseUrl","currentBatchSource","currentBatches","asObservable","currentLogSource","currentLogs","getAllBatches","get","create","model","console","log","post","pipe","batch","localStorage","setItem","JSON","stringify","next","update","updateMember","member","Member","put","index","members","indexOf","id","search","findBatch","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\gogre\\InventorySystem\\client\\src\\app\\_services\\Inventory.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject, map, tap } from 'rxjs';\nimport { Batch } from '../models/Batch';\nimport { Log } from '../models/Log';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InventoryService {\n  baseUrl = 'https://localhost:5001/api/batches/'\n  private currentBatchSource = new ReplaySubject<Batch>(1);\n  currentBatches = this.currentBatchSource.asObservable();\n\n  private currentLogSource = new ReplaySubject<Log>(1);\n  currentLogs = this.currentLogSource.asObservable();\n\n\n  constructor(private http: HttpClient) { }\n\n  public getAllBatches() : Observable<Batch[]> {\n    return this.http.get<Batch[]>(this.baseUrl);\n  }\n\n  create(model: any)\n  {  \n    console.log(model);\n    return this.http.post<Batch>(this.baseUrl +'create', model).pipe(\n      map((batch: Batch) => {\n        if (batch) {\n          localStorage.setItem('batch', JSON.stringify(batch));\n          this.currentBatchSource.next(batch);          \n        }\n      })\n    )\n  }\n\n  update(model: any)\n  {\n\n    updateMember(member: Member) {\n      return this.http.put(this.baseUrl + 'users', member).pipe(\n        map(() => {\n          const index = this.members.indexOf(member);\n          this.members[index] = member;\n        })\n      )\n    }\n    \n    //this.http.put<Batch>(this.baseUrl + model.id, model.JSON);\n\n    return this.http.put<Batch>(this.baseUrl + model.id, model).pipe(\n      map((batch: Batch) => {\n        if (batch) {\n          localStorage.setItem('batch', JSON.stringify(batch));\n          this.currentBatchSource.next(batch);          \n        }\n      }))\n\n    /*return this.http.put<Batch>(this.baseUrl + model.id, model.JSON).pipe(\n      map((batch: Batch) => {\n        if (batch) {\n          localStorage.setItem('batch', JSON.stringify(batch));\n          this.currentBatchSource.next(batch);          \n        }\n      })\n    )*/\n  }\n\n  search(id: number)\n  {\n    return this.http.get(this.baseUrl + 'branches/' + id);\n  }\n\n  findBatch (id: number)\n  {  \n    return this.http.post<Batch>(this.baseUrl + id, id).pipe(\n      map((batch: Batch) => {\n        if (batch) {\n          return batch;        \n        }\n        return batch;\n      })\n    )\n  }\n\n  /* updateBatch(batch: Batch):  Observable<Batch> {\n    let observable = this.http.put(this.baseUrl + batch.id, batch).pipe(\n        tap(result => {\n            //this code is not executed, I do not understand why                \n            this.lessonChange.emit(result);\n            return result;\n        })\n    );    \n    return observable;\n}*/\n}\n\n"],"mappings":"AAEA,SAAqBA,aAAa,EAAEC,GAAG,QAAa,MAAM;;;AAO1D,OAAM,MAAOC,gBAAgB;EAS3BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IARxB,KAAAC,OAAO,GAAG,qCAAqC;IACvC,KAAAC,kBAAkB,GAAG,IAAIN,aAAa,CAAQ,CAAC,CAAC;IACxD,KAAAO,cAAc,GAAG,IAAI,CAACD,kBAAkB,CAACE,YAAY,EAAE;IAE/C,KAAAC,gBAAgB,GAAG,IAAIT,aAAa,CAAM,CAAC,CAAC;IACpD,KAAAU,WAAW,GAAG,IAAI,CAACD,gBAAgB,CAACD,YAAY,EAAE;EAGV;EAEjCG,aAAaA,CAAA;IAClB,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAU,IAAI,CAACP,OAAO,CAAC;EAC7C;EAEAQ,MAAMA,CAACC,KAAU;IAEfC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClB,OAAO,IAAI,CAACV,IAAI,CAACa,IAAI,CAAQ,IAAI,CAACZ,OAAO,GAAE,QAAQ,EAAES,KAAK,CAAC,CAACI,IAAI,CAC9DjB,GAAG,CAAEkB,KAAY,IAAI;MACnB,IAAIA,KAAK,EAAE;QACTC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACJ,KAAK,CAAC,CAAC;QACpD,IAAI,CAACb,kBAAkB,CAACkB,IAAI,CAACL,KAAK,CAAC;;IAEvC,CAAC,CAAC,CACH;EACH;EAEAM,MAAMA,CAACX,KAAU;IAGfY,YAAY,CAACC,MAAM,EAAEC,MAAM,CAAC;IAAC;MAC3B,OAAO,IAAI,CAACxB,IAAI,CAACyB,GAAG,CAAC,IAAI,CAACxB,OAAO,GAAG,OAAO,EAAEsB,MAAM,CAAC,CAACT,IAAI,CACvDjB,GAAG,CAAC,MAAK;QACP,MAAM6B,KAAK,GAAG,IAAI,CAACC,OAAO,CAACC,OAAO,CAACL,MAAM,CAAC;QAC1C,IAAI,CAACI,OAAO,CAACD,KAAK,CAAC,GAAGH,MAAM;MAC9B,CAAC,CAAC,CACH;;IAGH;IAEA,OAAO,IAAI,CAACvB,IAAI,CAACyB,GAAG,CAAQ,IAAI,CAACxB,OAAO,GAAGS,KAAK,CAACmB,EAAE,EAAEnB,KAAK,CAAC,CAACI,IAAI,CAC9DjB,GAAG,CAAEkB,KAAY,IAAI;MACnB,IAAIA,KAAK,EAAE;QACTC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACJ,KAAK,CAAC,CAAC;QACpD,IAAI,CAACb,kBAAkB,CAACkB,IAAI,CAACL,KAAK,CAAC;;IAEvC,CAAC,CAAC,CAAC;IAEL;;;;;;;;EAQF;;EAEAe,MAAMA,CAACD,EAAU;IAEf,OAAO,IAAI,CAAC7B,IAAI,CAACQ,GAAG,CAAC,IAAI,CAACP,OAAO,GAAG,WAAW,GAAG4B,EAAE,CAAC;EACvD;EAEAE,SAASA,CAAEF,EAAU;IAEnB,OAAO,IAAI,CAAC7B,IAAI,CAACa,IAAI,CAAQ,IAAI,CAACZ,OAAO,GAAG4B,EAAE,EAAEA,EAAE,CAAC,CAACf,IAAI,CACtDjB,GAAG,CAAEkB,KAAY,IAAI;MACnB,IAAIA,KAAK,EAAE;QACT,OAAOA,KAAK;;MAEd,OAAOA,KAAK;IACd,CAAC,CAAC,CACH;EACH;;AA3EWjB,gBAAgB,C;mBAAhBA,gBAAgB,EAAAkC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAhBrC,gBAAgB,C;SAAhBA,gBAAgB;EAAAsC,OAAA,EAAhBtC,gBAAgB,CAAAuC,IAAA;EAAAC,UAAA,EAFf;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}