{"ast":null,"code":"import { ReplaySubject, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class InventoryService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'https://localhost:5001/api/';\n    this.currentUserSource = new ReplaySubject(1);\n    this.currentUser$ = this.currentUserSource.asObservable();\n  }\n  getAllBatches() {\n    return this.http.get(this.baseUrl + 'branches/');\n  }\n  register(model) {\n    return this.http.post(this.baseUrl + 'account/register', model).pipe(map(user => {\n      if (user) {\n        localStorage.setItem('user', JSON.stringify(user));\n        this.currentUserSource.next(user);\n      }\n    }));\n  }\n  search(model) {\n    return this.http.get(this.baseUrl + 'branches/', model);\n  }\n}\nInventoryService.ɵfac = function InventoryService_Factory(t) {\n  return new (t || InventoryService)(i0.ɵɵinject(i1.HttpClient));\n};\nInventoryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: InventoryService,\n  factory: InventoryService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["ReplaySubject","map","InventoryService","constructor","http","baseUrl","currentUserSource","currentUser$","asObservable","getAllBatches","get","register","model","post","pipe","user","localStorage","setItem","JSON","stringify","next","search","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\gogre\\InventorySystem\\client\\src\\app\\_services\\Inventory.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject, map } from 'rxjs';\nimport { Batch } from '../models/Batch';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InventoryService {\n  baseUrl = 'https://localhost:5001/api/'\n  private currentUserSource = new ReplaySubject<Batch>(1);\n  currentUser$ = this.currentUserSource.asObservable();\n\n  constructor(private http: HttpClient) { }\n\n  public getAllBatches() : Observable<Batch[]> {\n    return this.http.get<Batch[]>(this.baseUrl + 'branches/');\n  }\n\n  register(model: any)\n  {\n    return this.http.post(this.baseUrl + 'account/register', model).pipe(\n      map((user: Batch) => {\n        if (user) {\n          localStorage.setItem('user', JSON.stringify(user));\n          this.currentUserSource.next(user);\n        }\n      })\n    )\n  }\n\n  search(model: any)\n  {\n    return this.http.get(this.baseUrl + 'branches/', model);\n  }\n}\n"],"mappings":"AAEA,SAAqBA,aAAa,EAAEC,GAAG,QAAQ,MAAM;;;AAMrD,OAAM,MAAOC,gBAAgB;EAK3BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJxB,KAAAC,OAAO,GAAG,6BAA6B;IAC/B,KAAAC,iBAAiB,GAAG,IAAIN,aAAa,CAAQ,CAAC,CAAC;IACvD,KAAAO,YAAY,GAAG,IAAI,CAACD,iBAAiB,CAACE,YAAY,EAAE;EAEZ;EAEjCC,aAAaA,CAAA;IAClB,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAU,IAAI,CAACL,OAAO,GAAG,WAAW,CAAC;EAC3D;EAEAM,QAAQA,CAACC,KAAU;IAEjB,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAC,IAAI,CAACR,OAAO,GAAG,kBAAkB,EAAEO,KAAK,CAAC,CAACE,IAAI,CAClEb,GAAG,CAAEc,IAAW,IAAI;MAClB,IAAIA,IAAI,EAAE;QACRC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC;QAClD,IAAI,CAACT,iBAAiB,CAACc,IAAI,CAACL,IAAI,CAAC;;IAErC,CAAC,CAAC,CACH;EACH;EAEAM,MAAMA,CAACT,KAAU;IAEf,OAAO,IAAI,CAACR,IAAI,CAACM,GAAG,CAAC,IAAI,CAACL,OAAO,GAAG,WAAW,EAAEO,KAAK,CAAC;EACzD;;AA1BWV,gBAAgB,C;mBAAhBA,gBAAgB,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAhBvB,gBAAgB,C;SAAhBA,gBAAgB;EAAAwB,OAAA,EAAhBxB,gBAAgB,CAAAyB,IAAA;EAAAC,UAAA,EAFf;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}