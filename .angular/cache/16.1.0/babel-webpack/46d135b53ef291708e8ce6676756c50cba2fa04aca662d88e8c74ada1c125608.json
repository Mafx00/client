{"ast":null,"code":"import { ReplaySubject, map, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class InventoryService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'https://localhost:5001/api/batches/';\n    this.currentBatchSource = new ReplaySubject(1);\n    this.currentBatches = this.currentBatchSource.asObservable();\n    this.currentLogSource = new ReplaySubject(1);\n    this.currentLogs = this.currentLogSource.asObservable();\n  }\n  getAllBatches() {\n    return this.http.get(this.baseUrl + 'branches/');\n  }\n  create(model) {\n    return this.http.post(this.baseUrl + 'create', model).pipe(map(batch => {\n      if (batch) {\n        localStorage.setItem('batch', JSON.stringify(batch));\n        this.currentBatchSource.next(batch);\n      }\n    }));\n  }\n  search(model) {\n    return this.http.get(this.baseUrl + 'branches/', model);\n  }\n  updateBatch(batch) {\n    let observable = this.http.put(this.baseUrl + batch.id, batch).pipe(tap(result => {\n      //this code is not executed, I do not understand why                \n      this.lessonChange.emit(result);\n      return result;\n    }));\n    return observable;\n  }\n}\nInventoryService.ɵfac = function InventoryService_Factory(t) {\n  return new (t || InventoryService)(i0.ɵɵinject(i1.HttpClient));\n};\nInventoryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: InventoryService,\n  factory: InventoryService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["ReplaySubject","map","tap","InventoryService","constructor","http","baseUrl","currentBatchSource","currentBatches","asObservable","currentLogSource","currentLogs","getAllBatches","get","create","model","post","pipe","batch","localStorage","setItem","JSON","stringify","next","search","updateBatch","observable","put","id","result","lessonChange","emit","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\gogre\\InventorySystem\\client\\src\\app\\_services\\Inventory.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject, map, tap } from 'rxjs';\nimport { Batch } from '../models/Batch';\nimport { Log } from '../models/Log';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InventoryService {\n  baseUrl = 'https://localhost:5001/api/batches/'\n  private currentBatchSource = new ReplaySubject<Batch>(1);\n  currentBatches = this.currentBatchSource.asObservable();\n\n  private currentLogSource = new ReplaySubject<Log>(1);\n  currentLogs = this.currentLogSource.asObservable();\n\n\n  constructor(private http: HttpClient) { }\n\n  public getAllBatches() : Observable<Batch[]> {\n    return this.http.get<Batch[]>(this.baseUrl + 'branches/');\n  }\n\n  create(model: any)\n  {  \n    return this.http.post<Batch>(this.baseUrl +'create', model).pipe(\n      map((batch: Batch) => {\n        if (batch) {\n          localStorage.setItem('batch', JSON.stringify(batch));\n          this.currentBatchSource.next(batch);          \n        }\n      })\n    )\n  }\n\n  search(model: any)\n  {\n    return this.http.get(this.baseUrl + 'branches/', model);\n  }\n\n  updateBatch(batch: Batch):  Observable<Batch> {\n    let observable = this.http.put(this.baseUrl + batch.id, batch).pipe(\n        tap(result => {\n            //this code is not executed, I do not understand why                \n            this.lessonChange.emit(result);\n            return result;\n        })\n    );    \n    return observable;\n}\n}\n}\n"],"mappings":"AAEA,SAAqBA,aAAa,EAAEC,GAAG,EAAEC,GAAG,QAAQ,MAAM;;;AAO1D,OAAM,MAAOC,gBAAgB;EAS3BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IARxB,KAAAC,OAAO,GAAG,qCAAqC;IACvC,KAAAC,kBAAkB,GAAG,IAAIP,aAAa,CAAQ,CAAC,CAAC;IACxD,KAAAQ,cAAc,GAAG,IAAI,CAACD,kBAAkB,CAACE,YAAY,EAAE;IAE/C,KAAAC,gBAAgB,GAAG,IAAIV,aAAa,CAAM,CAAC,CAAC;IACpD,KAAAW,WAAW,GAAG,IAAI,CAACD,gBAAgB,CAACD,YAAY,EAAE;EAGV;EAEjCG,aAAaA,CAAA;IAClB,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAU,IAAI,CAACP,OAAO,GAAG,WAAW,CAAC;EAC3D;EAEAQ,MAAMA,CAACC,KAAU;IAEf,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAAQ,IAAI,CAACV,OAAO,GAAE,QAAQ,EAAES,KAAK,CAAC,CAACE,IAAI,CAC9DhB,GAAG,CAAEiB,KAAY,IAAI;MACnB,IAAIA,KAAK,EAAE;QACTC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACJ,KAAK,CAAC,CAAC;QACpD,IAAI,CAACX,kBAAkB,CAACgB,IAAI,CAACL,KAAK,CAAC;;IAEvC,CAAC,CAAC,CACH;EACH;EAEAM,MAAMA,CAACT,KAAU;IAEf,OAAO,IAAI,CAACV,IAAI,CAACQ,GAAG,CAAC,IAAI,CAACP,OAAO,GAAG,WAAW,EAAES,KAAK,CAAC;EACzD;EAEAU,WAAWA,CAACP,KAAY;IACtB,IAAIQ,UAAU,GAAG,IAAI,CAACrB,IAAI,CAACsB,GAAG,CAAC,IAAI,CAACrB,OAAO,GAAGY,KAAK,CAACU,EAAE,EAAEV,KAAK,CAAC,CAACD,IAAI,CAC/Df,GAAG,CAAC2B,MAAM,IAAG;MACT;MACA,IAAI,CAACC,YAAY,CAACC,IAAI,CAACF,MAAM,CAAC;MAC9B,OAAOA,MAAM;IACjB,CAAC,CAAC,CACL;IACD,OAAOH,UAAU;EACrB;;AAzCavB,gBAAgB,C;mBAAhBA,gBAAgB,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAhBhC,gBAAgB,C;SAAhBA,gBAAgB;EAAAiC,OAAA,EAAhBjC,gBAAgB,CAAAkC,IAAA;EAAAC,UAAA,EAFf;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}