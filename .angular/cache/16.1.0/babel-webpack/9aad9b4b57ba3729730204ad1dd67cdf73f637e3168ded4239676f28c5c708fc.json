{"ast":null,"code":"import { ReplaySubject, map } from 'rxjs';\nimport { Batch } from '../models/Batch';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class InventoryService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'https://localhost:5001/api/batches/';\n    this.currentBatchSource = new ReplaySubject(1);\n    this.currentBatches = this.currentBatchSource.asObservable();\n    this.batches = [];\n    this.currentLogSource = new ReplaySubject(1);\n    this.currentLogs = this.currentLogSource.asObservable();\n  }\n  getAllBatches() {\n    return this.http.get(this.baseUrl);\n  }\n  create(model) {\n    console.log(model);\n    return this.http.post(this.baseUrl + 'create', model).pipe(map(batch => {\n      if (batch) {\n        localStorage.setItem('batch', JSON.stringify(batch));\n        this.currentBatchSource.next(batch);\n      }\n    }));\n  }\n  getMembers(userParams) {\n    var response = this.memberCache.get(Object.values(userParams).join('-'));\n    if (response) {\n      return of(response);\n    }\n    update(batch, Batch);\n    {\n      return this.http.put(this.baseUrl + batch.id, batch).pipe(map(() => {\n        const index = this.batches.indexOf(batch);\n        this.batches[index] = batch;\n      }));\n    }\n    /*return this.http.put<Batch>(this.baseUrl + model.id, model.JSON).pipe(\n      map((batch: Batch) => {\n        if (batch) {\n          localStorage.setItem('batch', JSON.stringify(batch));\n          this.currentBatchSource.next(batch);\n        }\n      })\n    )*/\n    search(id, number);\n    {\n      return this.http.get(this.baseUrl + 'branches/' + id);\n    }\n    findBatch(id, number);\n    {\n      return this.http.post(this.baseUrl + id, id).pipe(map(batch => {\n        if (batch) {\n          return batch;\n        }\n        return batch;\n      }));\n    }\n    /* updateBatch(batch: Batch):  Observable<Batch> {\n      let observable = this.http.put(this.baseUrl + batch.id, batch).pipe(\n          tap(result => {\n              //this code is not executed, I do not understand why\n              this.lessonChange.emit(result);\n              return result;\n          })\n      );\n      return observable;\n    }*/\n  }\n}\n\nInventoryService.ɵfac = function InventoryService_Factory(t) {\n  return new (t || InventoryService)(i0.ɵɵinject(i1.HttpClient));\n};\nInventoryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: InventoryService,\n  factory: InventoryService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["ReplaySubject","map","Batch","InventoryService","constructor","http","baseUrl","currentBatchSource","currentBatches","asObservable","batches","currentLogSource","currentLogs","getAllBatches","get","create","model","console","log","post","pipe","batch","localStorage","setItem","JSON","stringify","next","getMembers","userParams","response","memberCache","Object","values","join","of","update","put","id","index","indexOf","search","number","findBatch","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\gogre\\InventorySystem\\client\\src\\app\\_services\\Inventory.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject, map, tap } from 'rxjs';\nimport { Batch } from '../models/Batch';\nimport { Log } from '../models/Log';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InventoryService {\n  baseUrl = 'https://localhost:5001/api/batches/'\n  private currentBatchSource = new ReplaySubject<Batch>(1);\n  currentBatches = this.currentBatchSource.asObservable();\n  batches: Batch[] = [];\n\n  private currentLogSource = new ReplaySubject<Log>(1);\n  currentLogs = this.currentLogSource.asObservable();\n\n\n  constructor(private http: HttpClient) { }\n\n  public getAllBatches() : Observable<Batch[]> {\n    return this.http.get<Batch[]>(this.baseUrl);\n  }\n\n  create(model: any)\n  {  \n    console.log(model);\n    return this.http.post<Batch>(this.baseUrl +'create', model).pipe(\n      map((batch: Batch) => {\n        if (batch) {\n          localStorage.setItem('batch', JSON.stringify(batch));\n          this.currentBatchSource.next(batch);          \n        }\n      })\n    )\n  }\n\n  getMembers(userParams: UserParams) {\n    var response = this.memberCache.get(Object.values(userParams).join('-'));\n    if (response) {\n      return of(response);\n    }\n\n  update(batch: Batch)\n  {\n    \n      return this.http.put(this.baseUrl + batch.id, batch).pipe(\n        map(() => {\n          const index = this.batches.indexOf(batch);\n          this.batches[index] = batch;\n        })\n      )\n    }\n\n    /*return this.http.put<Batch>(this.baseUrl + model.id, model.JSON).pipe(\n      map((batch: Batch) => {\n        if (batch) {\n          localStorage.setItem('batch', JSON.stringify(batch));\n          this.currentBatchSource.next(batch);          \n        }\n      })\n    )*/\n  \n\n  search(id: number)\n  {\n    return this.http.get(this.baseUrl + 'branches/' + id);\n  }\n\n  findBatch (id: number)\n  {  \n    return this.http.post<Batch>(this.baseUrl + id, id).pipe(\n      map((batch: Batch) => {\n        if (batch) {\n          return batch;        \n        }\n        return batch;\n      })\n    )\n  }\n\n  /* updateBatch(batch: Batch):  Observable<Batch> {\n    let observable = this.http.put(this.baseUrl + batch.id, batch).pipe(\n        tap(result => {\n            //this code is not executed, I do not understand why                \n            this.lessonChange.emit(result);\n            return result;\n        })\n    );    \n    return observable;\n}*/\n}\n\n"],"mappings":"AAEA,SAAqBA,aAAa,EAAEC,GAAG,QAAa,MAAM;AAC1D,SAASC,KAAK,QAAQ,iBAAiB;;;AAMvC,OAAM,MAAOC,gBAAgB;EAU3BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IATxB,KAAAC,OAAO,GAAG,qCAAqC;IACvC,KAAAC,kBAAkB,GAAG,IAAIP,aAAa,CAAQ,CAAC,CAAC;IACxD,KAAAQ,cAAc,GAAG,IAAI,CAACD,kBAAkB,CAACE,YAAY,EAAE;IACvD,KAAAC,OAAO,GAAY,EAAE;IAEb,KAAAC,gBAAgB,GAAG,IAAIX,aAAa,CAAM,CAAC,CAAC;IACpD,KAAAY,WAAW,GAAG,IAAI,CAACD,gBAAgB,CAACF,YAAY,EAAE;EAGV;EAEjCI,aAAaA,CAAA;IAClB,OAAO,IAAI,CAACR,IAAI,CAACS,GAAG,CAAU,IAAI,CAACR,OAAO,CAAC;EAC7C;EAEAS,MAAMA,CAACC,KAAU;IAEfC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClB,OAAO,IAAI,CAACX,IAAI,CAACc,IAAI,CAAQ,IAAI,CAACb,OAAO,GAAE,QAAQ,EAAEU,KAAK,CAAC,CAACI,IAAI,CAC9DnB,GAAG,CAAEoB,KAAY,IAAI;MACnB,IAAIA,KAAK,EAAE;QACTC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACJ,KAAK,CAAC,CAAC;QACpD,IAAI,CAACd,kBAAkB,CAACmB,IAAI,CAACL,KAAK,CAAC;;IAEvC,CAAC,CAAC,CACH;EACH;EAEAM,UAAUA,CAACC,UAAsB;IAC/B,IAAIC,QAAQ,GAAG,IAAI,CAACC,WAAW,CAAChB,GAAG,CAACiB,MAAM,CAACC,MAAM,CAACJ,UAAU,CAAC,CAACK,IAAI,CAAC,GAAG,CAAC,CAAC;IACxE,IAAIJ,QAAQ,EAAE;MACZ,OAAOK,EAAE,CAACL,QAAQ,CAAC;;IAGvBM,MAAM,CAACd,KAAK,EAAEnB,KAAK,CAAC;IACpB;MAEI,OAAO,IAAI,CAACG,IAAI,CAAC+B,GAAG,CAAC,IAAI,CAAC9B,OAAO,GAAGe,KAAK,CAACgB,EAAE,EAAEhB,KAAK,CAAC,CAACD,IAAI,CACvDnB,GAAG,CAAC,MAAK;QACP,MAAMqC,KAAK,GAAG,IAAI,CAAC5B,OAAO,CAAC6B,OAAO,CAAClB,KAAK,CAAC;QACzC,IAAI,CAACX,OAAO,CAAC4B,KAAK,CAAC,GAAGjB,KAAK;MAC7B,CAAC,CAAC,CACH;;IAGH;;;;;;;;IAUFmB,MAAM,CAACH,EAAE,EAAEI,MAAM,CAAC;IAClB;MACE,OAAO,IAAI,CAACpC,IAAI,CAACS,GAAG,CAAC,IAAI,CAACR,OAAO,GAAG,WAAW,GAAG+B,EAAE,CAAC;;IAGvDK,SAAS,CAAEL,EAAE,EAAEI,MAAM,CAAC;IACtB;MACE,OAAO,IAAI,CAACpC,IAAI,CAACc,IAAI,CAAQ,IAAI,CAACb,OAAO,GAAG+B,EAAE,EAAEA,EAAE,CAAC,CAACjB,IAAI,CACtDnB,GAAG,CAAEoB,KAAY,IAAI;QACnB,IAAIA,KAAK,EAAE;UACT,OAAOA,KAAK;;QAEd,OAAOA,KAAK;MACd,CAAC,CAAC,CACH;;IAGH;;;;;;;;;;EAUF;;;AAnFalB,gBAAgB,C;mBAAhBA,gBAAgB,EAAAwC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAhB3C,gBAAgB,C;SAAhBA,gBAAgB;EAAA4C,OAAA,EAAhB5C,gBAAgB,CAAA6C,IAAA;EAAAC,UAAA,EAFf;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}